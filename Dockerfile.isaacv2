# Installs Isaacsim and isaaclab with ROS2 Humble
# Source: https://github.com/isaac-sim/IsaacLab/blob/main/docker/Dockerfile.base

# Copyright (c) 2022-2025, The Isaac Lab Project Developers (https://github.com/isaac-sim/IsaacLab/blob/main/CONTRIBUTORS.md).
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

# Nvidia Dockerfiles: https://github.com/NVIDIA-Omniverse/IsaacSim-dockerfiles
# Please check above link for license information.




ARG ISAACSIM_BASE_IMAGE_ARG=nvcr.io/nvidia/isaac-sim
ARG ISAACSIM_VERSION_ARG=5.0.0

# Base image
FROM ${ISAACSIM_BASE_IMAGE_ARG}:${ISAACSIM_VERSION_ARG} AS base

# Set environment variables
ENV LANG=C.UTF-8
ENV DEBIAN_FRONTEND=noninteractive

ARG ISAACSIM_ROOT_PATH_ARG=/isaac-sim
ARG ISAACLAB_PATH_ARG=/isaaclab
ARG DOCKER_USER_HOME_ARG=/root
ARG ROS2_APT_PACKAGE=ros-base
ENV ROS_DISTRO=humble
ENV ROS_ROOT=/humble_ws


# Set default RUN shell to bash
SHELL ["/bin/bash", "-c"]

# Adds labels to the Dockerfile
LABEL version="2.1.1"
LABEL description="Dockerfile for building and running the Isaac Lab framework inside Isaac Sim container image."


########################################################
#          Isaacsim and Isaaclab Dependencies          #
########################################################

# Path to Isaac Sim root folder
ENV ISAACSIM_ROOT_PATH=${ISAACSIM_ROOT_PATH_ARG}
# Path to the Isaac Lab directory
ENV ISAACLAB_PATH=${ISAACLAB_PATH_ARG}
# Home dir of docker user, typically '/root'
ENV DOCKER_USER_HOME=${DOCKER_USER_HOME_ARG}

USER root

# Install dependencies and remove cache
RUN --mount=type=cache,target=/var/cache/apt \
    apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    libglib2.0-0 \
    ncurses-term \
    wget && \
    apt -y autoremove && apt clean autoclean && \
    rm -rf /var/lib/apt/lists/*

# # Copy the Isaac Lab directory (files to exclude are defined in .dockerignore)
# COPY ./ ${ISAACLAB_PATH}
# Clone the official Isaac Lab repository
RUN git clone --depth 1 https://github.com/isaac-sim/IsaacLab.git ${ISAACLAB_PATH}


# Ensure isaaclab.sh has execute permissions
RUN chmod +x ${ISAACLAB_PATH}/isaaclab.sh



# Set up a symbolic link between the installed Isaac Sim root folder and _isaac_sim in the Isaac Lab directory
RUN ln -sf ${ISAACSIM_ROOT_PATH} ${ISAACLAB_PATH}/_isaac_sim

# Install toml dependency
RUN ${ISAACLAB_PATH}/isaaclab.sh -p -m pip install toml

# Install apt dependencies for extensions that declare them in their extension.toml
RUN --mount=type=cache,target=/var/cache/apt \
    ${ISAACLAB_PATH}/isaaclab.sh -p ${ISAACLAB_PATH}/tools/install_deps.py apt ${ISAACLAB_PATH}/source && \
    apt -y autoremove && apt clean autoclean && \
    rm -rf /var/lib/apt/lists/*

# for singularity usage, have to create the directories that will binded
RUN mkdir -p ${ISAACSIM_ROOT_PATH}/kit/cache && \
    mkdir -p ${DOCKER_USER_HOME}/.cache/ov && \
    mkdir -p ${DOCKER_USER_HOME}/.cache/pip && \
    mkdir -p ${DOCKER_USER_HOME}/.cache/nvidia/GLCache &&  \
    mkdir -p ${DOCKER_USER_HOME}/.nv/ComputeCache && \
    mkdir -p ${DOCKER_USER_HOME}/.nvidia-omniverse/logs && \
    mkdir -p ${DOCKER_USER_HOME}/.local/share/ov/data && \
    mkdir -p ${DOCKER_USER_HOME}/Documents

# for singularity usage, create NVIDIA binary placeholders
RUN touch /bin/nvidia-smi && \
    touch /bin/nvidia-debugdump && \
    touch /bin/nvidia-persistenced && \
    touch /bin/nvidia-cuda-mps-control && \
    touch /bin/nvidia-cuda-mps-server && \
    touch /etc/localtime && \
    mkdir -p /var/run/nvidia-persistenced && \
    touch /var/run/nvidia-persistenced/socket

# installing Isaac Lab dependencies
# use pip caching to avoid reinstalling large packages
RUN --mount=type=cache,target=${DOCKER_USER_HOME}/.cache/pip \
    ${ISAACLAB_PATH}/isaaclab.sh --install

# HACK: Remove install of quadprog dependency
RUN ${ISAACLAB_PATH}/isaaclab.sh -p -m pip uninstall -y quadprog

# aliasing isaaclab.sh and python for convenience
RUN echo "export ISAACLAB_PATH=${ISAACLAB_PATH}" >> ${HOME}/.bashrc && \
    echo "alias isaaclab=${ISAACLAB_PATH}/isaaclab.sh" >> ${HOME}/.bashrc && \
    echo "alias python=${ISAACLAB_PATH}/_isaac_sim/python.sh" >> ${HOME}/.bashrc && \
    echo "alias python3=${ISAACLAB_PATH}/_isaac_sim/python.sh" >> ${HOME}/.bashrc && \
    echo "alias pip='${ISAACLAB_PATH}/_isaac_sim/python.sh -m pip'" >> ${HOME}/.bashrc && \
    echo "alias pip3='${ISAACLAB_PATH}/_isaac_sim/python.sh -m pip'" >> ${HOME}/.bashrc && \
    echo "alias tensorboard='${ISAACLAB_PATH}/_isaac_sim/python.sh ${ISAACLAB_PATH}/_isaac_sim/tensorboard'" >> ${HOME}/.bashrc && \
    echo "export TZ=$(date +%Z)" >> ${HOME}/.bashrc && \
    echo "shopt -s histappend" >> /root/.bashrc && \
    echo "PROMPT_COMMAND='history -a'" >> /root/.bashrc

ENV ACCEPT_EULA=Y


########################################################
#                       ROS 2 Installation             #
########################################################
ENV ISAACSIM_PYTHON=/isaaclab/_isaac_sim/kit/python/bin/python3
ENV ISAACSIM_PYTHON_INCLUDE=/isaaclab/_isaac_sim/kit/python/include/python3.11
ENV ISAACSIM_PYTHON_LIB=/isaaclab/_isaac_sim/kit/python/lib/libpython3.11.so
ENV PYTHONPATH=/isaaclab/_isaac_sim/kit/python/lib/python3.11/site-packages

# Lightweight ROS install
RUN apt-get update && apt-get install -y \
    curl gnupg2 lsb-release && \
    curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc \
    | apt-key add -

RUN sh -c "echo 'deb [arch=$(dpkg --print-architecture)] \
    http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main' \
    > /etc/apt/sources.list.d/ros2-latest.list"

RUN apt-get update && apt-get install -y \
    ros-${ROS_DISTRO}-ros-base \
    ros-${ROS_DISTRO}-rclpy \
    ros-${ROS_DISTRO}-geometry-msgs \
    ros-${ROS_DISTRO}-sensor-msgs \
    ros-${ROS_DISTRO}-tf2 \
    ros-${ROS_DISTRO}-tf2-ros \
    python3-colcon-common-extensions \
    && rm -rf /var/lib/apt/lists/*

# Create clean ROS overlay workspace
RUN mkdir -p ${ROS_ROOT}/src

WORKDIR ${ROS_ROOT}

# Build using IsaacSim Python
RUN ${ISAACSIM_PYTHON} -m pip install empy==3.3.4 \
    && . /opt/ros/${ROS_DISTRO}/setup.sh \
    && colcon build \
        --merge-install \
        --symlink-install \
        --cmake-args \
          -DPython3_EXECUTABLE=${ISAACSIM_PYTHON}

RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> ~/.bashrc 




########################################################
#               Workspace Dependencies                 #
########################################################

# TODO: Figure out cleaner way to do this so don't need to repeat

############## System packages ##############
RUN apt-get update && apt-get install -y \
    lsb-release \
 && rm -rf /var/lib/apt/lists/*

# Pybind Dependencies
RUN apt-get update && apt-get install -y \
    python3-dev \ 
    pybind11-dev \
    libeigen3-dev

############## Pinocchio Install (robot_motion) ##############
RUN mkdir -p /etc/apt/keyrings && \
    curl -fsSL http://robotpkg.openrobots.org/packages/debian/robotpkg.asc \
        -o /etc/apt/keyrings/robotpkg.asc && \
     echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/robotpkg.asc] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -cs) robotpkg" \
        > /etc/apt/sources.list.d/robotpkg.list

RUN apt-get update && apt-get install -y \
    robotpkg-py3*-pinocchio \
 && rm -rf /var/lib/apt/lists/*


ENV PATH="/opt/openrobots/bin:${PATH:-}" \
    PKG_CONFIG_PATH="/opt/openrobots/lib/pkgconfig:${PKG_CONFIG_PATH:-}" \
    LD_LIBRARY_PATH="/opt/openrobots/lib:${LD_LIBRARY_PATH:-}" \
    PYTHONPATH="/opt/openrobots/lib/python3.11/site-packages:${PYTHONPATH:-}" \
    CMAKE_PREFIX_PATH="/opt/openrobots:${CMAKE_PREFIX_PATH:-}"

############## Libfranka Install (robot_motion_interface) ##############

RUN apt-get update && apt-get install -y \
    libpoco-dev \
    libfmt-dev 

WORKDIR /tmp

# Clone and build repo
RUN git clone --recurse-submodules https://github.com/frankarobotics/libfranka.git && \
    cd libfranka && \
    git checkout 0.9.2 && \
    git submodule update && \
        mkdir build  && \
    cd build  && \
    cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/opt/openrobots/lib/cmake -DBUILD_TESTS=OFF ..  && \
    make  && \
    cpack -G DEB  && \
    dpkg -i libfranka*.deb  && \
    cd /tmp && rm -rf libfranka

WORKDIR /workspace

############## Local Python and C++ Installs ##############
COPY ./libs /workspace/libs

WORKDIR /workspace/libs/robot_motion
RUN rm -rf build/ && \
    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release && \
    cmake --build build -j && \
    cmake --install build && \
    ldconfig

WORKDIR /workspace/libs/robot_motion_interface
RUN rm -rf build/ && \
    cmake -S . -B build -DCMAKE_BUILD_TYPE=Release  && \
    cmake --build build -j && \
    cmake --install build && \
    ldconfig

WORKDIR /workspace
ENV PIP_BREAK_SYSTEM_PACKAGES=1
# Debian numpy conflicts with pip numpy

RUN ${ISAACLAB_PATH}/isaaclab.sh -p -m pip install -e libs/robot_motion && \
    ${ISAACLAB_PATH}/isaaclab.sh -p -m pip install -e libs/robot_motion_interface 

WORKDIR /workspace